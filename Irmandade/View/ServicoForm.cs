using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Irmandade.Data;
using System.Data.SQLite;
using Irmandade.Model;

namespace Irmandade
{
    public partial class ServicoForm : Form
    {
        private const int FormInitialHeight = 366;
        private const int FormExpandedHeight = 490;
        private bool _isExpanded = false;
        string _CPF = null;

        public ServicoForm()
        {
            InitializeComponent();
        }

        public ServicoForm(string CPF)
        {
            InitializeComponent();
            _CPF = CPF;
        }

        private void ServicoForm_Load(object sender, EventArgs e)
        {
            Form form = this.FindForm();
            form.Size = new Size(form.Size.Width, FormInitialHeight);

            CarregaDados();
            if (listBox.SelectedIndex == -1)
            {
                editButton.Enabled = false;
                // MessageBox.Show("Por favor selecione um item antes!");
            }
        }

        private void CarregaDados()
        {
            listBox.Items.Clear();

            DataTable dt = new DataTable();
            string sql;

            if (_CPF == null)
            {
                sql = "SELECT S.* FROM Servicos S";
            }
            else
            {
                // TODO load only the Servicos that the Pessoa doesn't have
                sql = "SELECT S.* FROM Servicos S " +
                            "WHERE (S.Id) NOT IN " +
                            "( SELECT S.Id " +
                                "FROM Servicos S INNER JOIN Pessoas_Servicos PS " +
                                "ON S.Id = PS.Servico_Id " +
                                "WHERE (PS.Pessoa_CPF == " + @" """ + _CPF + @""" " + ") )" + 
                            "ORDER BY S.Descricao";
            }
            try
            {
                dt = Repository.Instance.GetDataTableFromConnection<SQLiteConnection>(sql);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    listBox.Items.Add(dr[1]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Erro:" + ex.Message);
            }
        }

        private void addButton_Click(object sender, EventArgs e)
        {
            if (listBox.SelectedIndex == -1)
            {
                MessageBox.Show("Erro: Selecione ou Crie algum Serviço!");
                return;                
            }                        

            using (SQLiteConnection conn = Repository.DbConnection())
            {
                conn.Open();
                using (SQLiteCommand cmd = new SQLiteCommand(conn))
                {
                    cmd.CommandText = "INSERT INTO Pessoas_Servicos(Servico_Id, Pessoa_CPF) " +
                                         "SELECT S.Id, @Pessoa_CPF " + 
                                         "FROM Servicos S " + 
                                         "WHERE (S.Descricao = @Descricao)";
                    cmd.Prepare();
                    cmd.Parameters.AddWithValue("@Descricao", listBox.SelectedItem.ToString());
                    cmd.Parameters.AddWithValue("@Pessoa_CPF", _CPF);
                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    catch (SQLiteException ex)
                    {
                        throw ex;
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
                CarregaDados();
            }

        }

        private int IncluirServico(string descricao)
        {
            int resultado = -1;
            
            using (SQLiteConnection conn = Repository.DbConnection())
            {
                conn.Open();
                using (SQLiteCommand cmd = new SQLiteCommand(conn))
                {
                    cmd.CommandText = "INSERT INTO Servicos(Descricao) " +
                                       "VALUES (@Descricao)";
                    cmd.Prepare();
                    //Id autogenerated
                    cmd.Parameters.AddWithValue("@Descricao", descricao);                    
                    try
                    {
                        resultado = cmd.ExecuteNonQuery();
                    }                
                    catch (SQLiteException ex)
                    {
                        MessageBox.Show("Erro: Serviço não inserido!\n" + 
                                        "Detalhes do erro: \n"  + ex.Message);                        
                    }
                    finally
                    {
                        conn.Close();
                        CarregaDados();
                    }
                }
            }
            return resultado;
        }

        private void editButton_Click(object sender, EventArgs e)
        {
            //if (servicosComboBox.SelectedIndex != -1)
            //{ servico = servicosComboBox.SelectedItem.ToString(); }

            if (string.IsNullOrWhiteSpace(textBox.Text))
            {
                MessageBox.Show("Erro: Digite o novo nome do serviço na caixa ao lado!");
                return;
            }

            if (listBox.SelectedIndex == -1)
            {
                MessageBox.Show("Erro: Selecione algum Serviço para ser alterado!");
                return;
            }

            try
            {
                DialogResult response = MessageBox.Show($"Deseja EDITAR este o serviço {listBox.SelectedItem.ToString()} por {textBox.Text}?", "Editar Serviço",
                      MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (response == DialogResult.Yes)
                {
                    Repository.Instance.EditServico(listBox.SelectedItem.ToString(), textBox.Text);                    
                }
            }
            catch (SQLiteException ex)
            {
                MessageBox.Show("Erro: " + ex.Message);
            }
            textBox.Clear();
            CarregaDados();
        }

        private void listBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            // if any item is selectec in the list box, enable this button

            if (listBox.SelectedIndex == -1)
            {
                editButton.Enabled = false;                
            }
            else
            {                
                editButton.Enabled = true;
            }
                  
        }

        private void exitButton_Click(object sender, EventArgs e)
        {
            // TODO fazer alguma verificacao antes de fechar
            Close();
        }

        private void newButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(textBox.Text))
            {
                MessageBox.Show("Erro: Nome de Serviço inválido!");
                return;
            }
            try
            {
                IncluirServico(textBox.Text);
            }
            catch(SQLiteException ex)
            {
                MessageBox.Show("Erro: " + ex.Message);
            }
            textBox.Clear();
            CarregaDados();
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void expandButton_Click(object sender, EventArgs e)
        {
            Form form = this.FindForm();            
            if (_isExpanded)
            {
                form.Size = new Size(form.Size.Width, FormInitialHeight);
                expandButton.Text = " >> ";
            }
            else
            {
                form.Size = new Size(form.Size.Width, FormExpandedHeight);
                expandButton.Text = " << ";
            }

            textBox.Enabled = !_isExpanded;
            newButton.Enabled = !_isExpanded;
            editButton.Enabled = !_isExpanded;

            _isExpanded = !_isExpanded;
        }
    }
}
